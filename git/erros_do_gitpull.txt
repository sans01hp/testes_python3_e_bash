### üìö Guia: Configurando o `git pull` para usar Merge

Este documento explica como configurar o `git pull` para **sempre usar merge**, garantindo que seu fluxo de trabalho seja simples e seguro.

---

## ‚úÖ 1Ô∏è‚É£ O que √© `git pull` com Merge

* O `git pull` √© um comando que faz duas coisas: `fetch` (baixar altera√ß√µes do reposit√≥rio remoto) + `merge` (mesclar essas altera√ß√µes com seus commits locais).
* Quando h√° commits diferentes no remoto e no local, o merge cria um **commit de merge** para unir os dois hist√≥ricos.

**Vantagem:**

* Preserva tudo.
* Evita sobrescrever hist√≥rico remoto sem querer.
* √â o m√©todo mais simples e seguro para times.

---

## ‚úÖ 2Ô∏è‚É£ Como definir merge como padr√£o

No terminal, execute:

```bash
git config --global pull.rebase false
```

Isso configura **todos os seus reposit√≥rios** para usar merge sempre que fizer `git pull`.

---

## ‚úÖ 3Ô∏è‚É£ Fluxo recomendado

1. **Adicione e commite suas mudan√ßas:**

   ```bash
   git add .
   git commit -m "Mensagem do commit"
   ```

2. **Atualize sua branch local com o remoto:**

   ```bash
   git pull origin main
   ```

3. **Envie suas altera√ß√µes para o remoto:**

   ```bash
   git push origin main
   ```

Se n√£o houver conflito, tudo acontece automaticamente.

---

## ‚úÖ 4Ô∏è‚É£ Se houver conflito

1. O Git vai indicar os arquivos em conflito.
2. Edite cada arquivo e resolva os conflitos.
3. Marque os arquivos como resolvidos:

   ```bash
   git add nome_do_arquivo
   ```
4. Finalize o merge:

   ```bash
   git commit
   ```
5. Por fim, envie para o remoto:

   ```bash
   git push origin main
   ```

---

## ‚úÖ 5Ô∏è‚É£ Script autom√°tico (opcional)

Voc√™ pode criar um script Bash para automatizar esse fluxo:

```bash
#!/bin/bash

# Faz pull com merge
echo "== Fazendo pull com merge =="
git pull origin main

# Se o pull der certo, faz push
if [ $? -eq 0 ]; then
  echo "== Pull bem-sucedido! Dando push =="
  git push origin main
else
  echo "‚ö†Ô∏è Conflito detectado. Resolva antes de dar push!"
fi
```

Salve como `git-auto-push.sh` e d√™ permiss√£o de execu√ß√£o:

```bash
chmod +x git-auto-push.sh
```

Execute com:

```bash
./git-auto-push.sh
```

---

### ‚úÖ Pronto!

Assim voc√™ garante que o `git pull` **sempre faz merge** e evita problemas com hist√≥ricos divergentes.
